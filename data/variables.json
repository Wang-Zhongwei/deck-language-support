{
	"x_min": {
		"detail": "x_min",
		"documentation": "Grid coordinate of the minimum x boundary"
	},
	"y_min": {
		"detail": "y_min",
		"documentation": "Grid coordinate of the minimum y boundary"
	},
	"z_min": {
		"detail": "z_min",
		"documentation": "Grid coordinate of the minimum z boundary"
	},
	"x_max": {
		"detail": "x_max",
		"documentation": "Grid coordinate of the maximum x boundary"
	},
	"y_max": {
		"detail": "y_max",
		"documentation": "Grid coordinate of the maximum y boundary"
	},
	"z_max": {
		"detail": "z_max",
		"documentation": "Grid coordinate of the maximum z boundary"
	},
	"t_end": {
		"detail": "t_end",
		"documentation": "Simulation end time"
	},
	"px": {
		"detail": "px",
		"documentation": "Number of grid points in the x direction"
	},
	"py": {
		"detail": "py",
		"documentation": "Number of grid points in the y direction"
	},
	"pz": {
		"detail": "pz",
		"documentation": "Number of grid points in the z direction"
	},
	"nx": {
		"detail": "nx",
		"documentation": "Number of grid points in the x direction"
	},
	"ny": {
		"detail": "ny",
		"documentation": "Number of grid points in the y direction"
	},
	"nz": {
		"detail": "nz",
		"documentation": "Number of grid points in the z direction"
	},
	"dx": {
		"detail": "dx",
		"documentation": "Grid spacing in the x direction"
	},
	"dy": {
		"detail": "dy",
		"documentation": "Grid spacing in the y direction"
	},
	"dz": {
		"detail": "dz",
		"documentation": "Grid spacing in the z direction"
	},
	"nsteps": {
		"detail": "nsteps",
		"documentation": "Number of time steps"
	},
	"dumpmask": {
		"detail": "Determines which output dumps will include this particle species",
		"documentation": "The dumpmask has the same semantics as those used by variables in the “output” block. The actual dumpmask from the output block is applied first and then this one is applied afterwards. For example, if the species block contains “dumpmask = full” and the output block contains “vx = always” then the particle velocity will be only be dumped at full dumps for this particle species. The default dumpmask is “always”."
	},
	"nparticles": {
		"detai;": "The global number of pseudoparticles in the simulation",
		"documentation": "This parameter does not need to be given if a specific number of particles is supplied for each particle species by using the “nparticles” directive in each species block (see Section 3.4). If both are given then the value in the control block will be ignored. “npart” is accepted as an alias."
	},
	"dt_multiplier": {
		"detail": " Factor by which the timestep is multiplied before it is applied in the code, i.e. a multiplying factor applied to the CFL condition on the timestep",
		"documentation": "Must be less than one. If no value is given then the default of 0.95 is used. If maxwell solver is different from “yee” (the default) this parameter becomes increasingly relevant."
	},
	"dlb_threshold": {
		"detail": "The minimum ratio of the load on the least loaded processor to that on the most loaded processor allowed before the code load balances",
		"documentation": "Set to 1 means always balance, set to 0 means never balance. If this parameter is not specified then the code will only be load balanced at initialisation time."
	},
	"restart snapshot": {
		"detail": "The number of a previously written restart dump to restart the code from",
		"documentation": "If not specified then the initial conditions from the input deck are used. Note that as of version 4.2.5, this parameter can now also accept a filename in place of a number. If you want to restart from “0012.sdf” then it can either be specified using “restart snapshot = 12”, or alternatively it can be specified using “restart snapshot = 0012.sdf”. This syntax is required if output file prefixes have been used (see Section 3.9)."
	},
	"field_order": {
		"detail": "Order of the finite difference scheme used for solving Maxwell's equations",
		"documentation": "Can be 2, 4 or 6. If not specified, the default is to use a second order scheme."
	},
	"maxwell_solver": {
		"detail": "Choose a Maxwell solver scheme with an extended stencil",
		"documentation": "This option is only active if field order is set to 2. Possible options are “yee”, “lehe {x,y,z}”, “pukhov”, “cowan” and “custom”. Note that not all options are available in 1d and 2d. The default is “yee” which is the default second order scheme."
	},
	"stdout_frequency": {
		"detail": "If specified then the code will print a one line status message to stdout after every given number or timesteps",
		"documentation": "The default is to print nothing to screen (ie. “stdout frequency = 0”)"
	},
	"use_random_seed": {
		"detail": "The initial particle distribution is generated using a random number generator",
		"documentation": "By default, EPOCH uses a fixed value for the random generator seed so that results are repeatable. If this flag is set to “T” then the seed will be generated using the system clock"
	},
	"nproc{x,y,z}": {
		"detail": "Number of processes in the x,y,z directions",
		"documentation": "By default, EPOCH will try to pick the best method of splitting the domain amongst the available processors but occasionally the user may wish to override this choice"
	},
	"smooth_currents": {
		"detail": "This is a logical flag",
		"documentation": "If set to “T” then a smoothing function is applied to the current generated during the particle push. This can help to reduce noise and self-heating in a simulation. The smoothing function used is the same as that outlined in Buneman [3]. The default value is “F”"
	},
	"field_ionisation": {
		"detail": "Logical flag which turns on field ionisation",
		"documentation": "See Section 3.4.2"
	},
	"use_bsi": {
		"detail": "Logical flag which turns on barrier suppression ionisation correction to the tunnelling ionisation model for high intensity lasers",
		"documentation": "See Section 3.4.2. This flag should always be enabled when using field ionisation and is only supplied for testing purposes. The default is “T”"
	},
	"use_multiphoton": {
		"detail": "Logical flag which turns on modelling ionisation by multiple photon absorption",
		"documentation": "This should be set to “F” if there is no laser attached to a boundary as it relies on laser frequency. See Section 3.4.2. This flag should always be enabled when using field ionisation and is only supplied for testing purposes. The default is “T”"
	},
	"particle_tstart": {
		"detail": "Specifies the time at which to start pushing particles",
		"documentation": "This allows the field to evolve using the Maxwell solver for a specified time before beginning to move the particles"
	},
	"use_exact_restart": {
		"detail": "Logical flag which makes a simulation restart using exactly the same configuration as the original simulation",
		"documentation": "If set to “T” then the domain split amongst processors will be identical along with the seeds for the random number generators. Note that the flag will be ignored if the number of processors does not match that used in the original run. The default value is “T”"
	},
	"allow_cpu_reduce": {
		"detail": "Logical flag which allows the number of CPUs used to be reduced from the number specified",
		"documentation": "If this flag is set to “T” then EPOCH will continue to run and leave some of the requested CPUs idle. If set to “F” then code will exit if all CPUs cannot be utilised. The default value is “T”"
	},
	"check_stop_file_frequency": {
		"detail": "Integer parameter controlling automatic halting of the code",
		"documentation": "The frequency is specified as number of simulation cycles. Refer to description later in this section. The default value is 10"
	},
	"charge": {
		"detail": "This sets the charge of the species in multiples of the electron charge",
		"documentation": "Negative numbers are used for negatively charged particles. This is a mandatory parameter."
	},
	"mass": {
		"detail": "This sets the mass of the species in multiples of the electron mass.",
		"documentation": "Cannot be negative. This is a mandatory parameter."
	},
	"fraction": {
		"detail": "fraction of nparticles"
	},
	"nparticles_per_cell": {
		"detail": "Integer parameter which specifies the number of particles per cell to use for the initial particle loading",
		"documentation": "At a later stage this may be extended to allow “nparticles per cell” to be a spatially varying function. If per-species weighting is used then the value of “nparticles per cell” will be the average number of particles per cell. If “nparticles” or “fraction” have also been specified for a species, then they will be ignored."
	},
	"atomic_number": {
		"detail": "Integer parameter specifying the atomic number of a species",
		"documentation": "This is used by the bremsstrahlung radiation model. See Section 3.15 for details."
	},
	"zero_current": {
		"detail": "Logical flag switching the particle species into zero-current particles",
		"documentation": "Zero-current particles are enabled if the if the “NO TRACER PARTICLES” precompiler option has not been used and the “zero current” flag is set to true for a given species. When set, the species will move correctly for its charge and mass, but contribute no current. This means that these particles are passive elements in the simulation. In all other respects they are designed to behave identically to ordinary particles, so they do take part in collisions by default. This can be prevented using the collision matrices in “collisions block” (Section 3.13). WARNING: Since the particles effectively have zero weight in terms of their numerical heating properties, they do not always behave in the same way that an ordinary particle with weight would behave and this can sometimes lead to unexpected behaviour. If the purpose is merely to track a subset of a particle species to use as output then a better mechanism to use is “persistent subsets” (see Section 3.17.2). “tracer” is currently accepted as an alias but this will be removed in version 5.0. “zero current = F” is the default value."
	},
	"immobile": {
		"detail": "Logical flag. If this parameter is set to “T” then the species will be ignored during the particle push",
		"documentation": "The default value is “F”"
	},
	"background_species": {
		"detail": "Logical flag. If set to “T” the species will be treated as a non-evolving continuum background. No particles are loaded. Any particle-like specifications will be ignored",
		"documentation": "Background species are currently only used by the bremsstrahlung radiation model. See Section 3.15 for details. Default value is “F”. 'background' is accepted as an alias"
	},
	"number_density": {
		"detail": "Particle number density in m-3",
		"documentation": "As soon as a number density= line has been read, the values are calculated for the whole domain and are available for reuse on the right-hand side of an expression. This parameter is mandatory. 'density' is accepted as an alias"
	},
	"number_density_min": {
		"detail": "Minimum particle number density in m-3",
		"documentation": "When the number density in a cell falls below number_density_min, the autoloader does not load any pseudoparticles into that cell to minimize the number of low weight, unimportant particles. If set to 0 then all cells are loaded with particles. This is the default. 'density_min' is accepted as an alias"
	},
	"number_density_max": {
		"detail": "Maximum particle number density in m-3",
		"documentation": "When the number density in a cell rises above number_density_max, the autoloader clips the density to number_density_max allowing easy implementation of exponential rises to plateaus. If it is a negative value then no clipping is performed. This is the default. 'density_max' is accepted as an alias"
	},
	"mass_density": {
		"detail": "Particle mass density in kg m-3",
		"documentation": "The same as 'number_density' but multiplied by the particle mass. If you wish to use units of g cm-3 then append the appropriate multiplication factor. For example: 'mass_density = 2 * 1e3 / cc'"
	},
	"temperature": {
		"detail": "Sets an isotropic temperature distribution in Kelvin",
		"documentation": "If both 'temperature' and a specific 'temperature_{x,y,z}' parameter is specified, then the last to appear in the deck has precedence. If neither are given then the species will have a default temperature of zero Kelvin. 'temp' is accepted as an alias"
	},
	"temperature_x_ev": {
		"detail": "The temperature in each direction for a thermal distribution specified in electronvolts",
		"documentation": "'temp_{x,y,z}_ev' is accepted as aliases"
	},
	"temperature_y_ev": {
		"detail": "The temperature in each direction for a thermal distribution specified in electronvolts",
		"documentation": "'temp_{x,y,z}_ev' is accepted as aliases"
	},
	"temperature_z_ev": {
		"detail": "The temperature in each direction for a thermal distribution specified in electronvolts",
		"documentation": "'temp_{x,y,z}_ev' is accepted as aliases"
	},
	"temperature_ev": {
		"detail": "Sets an isotropic temperature distribution in electronvolts",
		"documentation": "If both 'temperature_ev' and a specific 'temperature_{x,y,z}_ev' parameter is specified, then the last to appear in the deck has precedence. If neither are given then the species will have a default temperature of zero electronvolts. 'temp_ev' is accepted as an alias"
	},
	"drift_px": {
		"detail": "Specifies a momentum space offset"
	},
	"drift_py": {
		"detail": "Specifies a momentum space offset"
	},
	"drift_pz": {
		"detail": "Specifies a momentum space offset"
	},
	"ionisation_energies": {
		"detail": "This is an array of ionisation energies (in Joules) starting from the outermost shell",
		"documentation": "It expects to be given all energies down to the fully ionised ion; if the user wishes to exclude some inner shell ionisation for some reason they need to give this a very large number. Note that the ionisation model assumes that the outermost electron ionises first always, and that the orbitals are filled assuming ground state. If you wish to specify the values in Electron-Volts, add the “ev” multiplication factor (see Section 3.19.1)"
	},
	"ionisation_electron_species": {
		"detail": "Name of the electron species",
		"documentation": "This can be specified as an array in the event that the user wishes some levels to have a different electron species which can be handy for monitoring ionisation at specific levels. 'electron' and 'electron species' are accepted as synonyms. Either one species for all levels, or one species for each species should be specified"
	},
	"amp": {
		"detail": "The amplitude of the E field of the laser in V/m",
		"documentation": ""
	},
	"intensity": {
		"detail": " The intensity of the laser in W/m2.",
		"documentation": "There is no need to specify both intensity and amp and the last specified in the block is the value used. It is mandatory to specify at least one. The ampli- tude of the laser is calculated from intensity using the formula amp = sqrt(2*intensity/c/epsilon0). “irradiance” is accepted as a synonym"
	},
	"omega": {
		"detail": "Angular frequency (rad/s not Hz) for the laser",
		"documentation": ""
	},
	"frequency": {
		"detail": " Ordinary frequency (Hz not rad/s) for the laser",
		"docoumentation": ""
	},
	"lambda": {
		"detail": " Wavelength in a vacuum for the laser specified in m",
		"docoumentation": "If you want to specify in μm then you can multiply by the constant “micron”. One of lambda or omega (or frequency) is a required parameter."
	},
	"polarisation_angle": {
		"detail": "Polarisation angle for the electric field of the laser in radians",
		"documentation": "This parameter is optional and has a value of zero by default. The angle is measured with respect to the right-hand triad of propagation direction, electric and magnetic fields. Although the 1D code has no y or z spatial axis, the fields still have y and z components. If the laser is on x min then the default E field is in the y-direction and the B field is the z-direction. The polarisation angle is measured clockwise about the x-axis with zero along the Ey direction."
	},
	"phase": {
		"detail": "The phase profile of the laser wavefront given in radians",
		"documentation": "Phase may be a function of both space and time. The laser is driven using sin(ωt + φ) and phase is the φ parameter. There is zero phase shift applied by default."
	},
	"polarisation": {
		"detail": "This is identical to polarisation angle with the angle specified in degrees rather than radians",
		"documentation": "If both polarisation angle and polarisation are specified, the last one is used. 'pol' is accepted as an alias."
	},
	"profile": {
		"detail": "The spatial profile of the laser. This should be a spatial function not including any values in the direction normal to the boundary on which the laser is attached, and the expression will be evaluated at the boundary. It may also be time-dependent.",
		"documentation": "The laser field is multiplied by the profile to give its final amplitude, so the intention is to use a value between zero and one. By default, it is a unit constant and therefore has no effect on the laser amplitude. This parameter is redundant in 1D and is only included for consistency with 2D and 3D versions of the code."
	},
	"t_profile": {
		"detail": "Used to specify the time profile for the laser amplitude. Like the profile, the laser field is multiplied by this parameter, but it is only a function of time and not space.",
		"documentation": "In a similar manner to the profile, it is best to use a value between zero and one. Setting values greater than one is possible but will cause the maximum laser intensity to grow beyond the amp. In previous versions of EPOCH, the profile parameter was only a function of space, and this parameter was used to impose time-dependence. Since the profile can now vary in time, t_profile is no longer needed but it has been kept to facilitate backward compatibility. It can also make input decks clearer if the time dependence is given separately. The default value of t_profile is just the real constant value of 1.0."
	},
	"t_start": {
		"detail": "Start time for the laser in seconds. Can be set to the string 'start' to start at the beginning of the simulation. This is the default value.",
		"documentation": "When using this parameter, the laser start is hard. To get a soft start, use the t_profile parameter to ramp the laser up to full strength."
	}
}
